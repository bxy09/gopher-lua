// Code generated by protoc-gen-go.
// source: checkpoint.proto
// DO NOT EDIT!

/*
Package lua is a generated protocol buffer package.

It is generated from these files:
	checkpoint.proto

It has these top-level messages:
	PLFunction
	PLTable
	PElement
	PUpvalue
	PFnProto
	PCheckpoint
	PLValue
*/
package lua

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PLFunction struct {
	Env      uint64   `protobuf:"varint,1,opt,name=Env,json=env" json:"Env,omitempty"`
	Proto    uint64   `protobuf:"varint,2,opt,name=Proto,json=proto" json:"Proto,omitempty"`
	Upvalues []uint64 `protobuf:"varint,3,rep,packed,name=Upvalues,json=upvalues" json:"Upvalues,omitempty"`
}

func (m *PLFunction) Reset()                    { *m = PLFunction{} }
func (m *PLFunction) String() string            { return proto.CompactTextString(m) }
func (*PLFunction) ProtoMessage()               {}
func (*PLFunction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PLTable struct {
	Array  []*PLValue `protobuf:"bytes,1,rep,name=Array,json=array" json:"Array,omitempty"`
	Keys   []*PLValue `protobuf:"bytes,2,rep,name=Keys,json=keys" json:"Keys,omitempty"`
	Values []*PLValue `protobuf:"bytes,3,rep,name=Values,json=values" json:"Values,omitempty"`
}

func (m *PLTable) Reset()                    { *m = PLTable{} }
func (m *PLTable) String() string            { return proto.CompactTextString(m) }
func (*PLTable) ProtoMessage()               {}
func (*PLTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PLTable) GetArray() []*PLValue {
	if m != nil {
		return m.Array
	}
	return nil
}

func (m *PLTable) GetKeys() []*PLValue {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *PLTable) GetValues() []*PLValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type PElement struct {
	// Types that are valid to be assigned to Element:
	//	*PElement_Fn
	//	*PElement_Table
	//	*PElement_Builtin
	Element isPElement_Element `protobuf_oneof:"element"`
}

func (m *PElement) Reset()                    { *m = PElement{} }
func (m *PElement) String() string            { return proto.CompactTextString(m) }
func (*PElement) ProtoMessage()               {}
func (*PElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isPElement_Element interface {
	isPElement_Element()
}

type PElement_Fn struct {
	Fn *PLFunction `protobuf:"bytes,1,opt,name=Fn,json=fn,oneof"`
}
type PElement_Table struct {
	Table *PLTable `protobuf:"bytes,2,opt,name=Table,json=table,oneof"`
}
type PElement_Builtin struct {
	Builtin string `protobuf:"bytes,3,opt,name=Builtin,json=builtin,oneof"`
}

func (*PElement_Fn) isPElement_Element()      {}
func (*PElement_Table) isPElement_Element()   {}
func (*PElement_Builtin) isPElement_Element() {}

func (m *PElement) GetElement() isPElement_Element {
	if m != nil {
		return m.Element
	}
	return nil
}

func (m *PElement) GetFn() *PLFunction {
	if x, ok := m.GetElement().(*PElement_Fn); ok {
		return x.Fn
	}
	return nil
}

func (m *PElement) GetTable() *PLTable {
	if x, ok := m.GetElement().(*PElement_Table); ok {
		return x.Table
	}
	return nil
}

func (m *PElement) GetBuiltin() string {
	if x, ok := m.GetElement().(*PElement_Builtin); ok {
		return x.Builtin
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PElement) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PElement_OneofMarshaler, _PElement_OneofUnmarshaler, _PElement_OneofSizer, []interface{}{
		(*PElement_Fn)(nil),
		(*PElement_Table)(nil),
		(*PElement_Builtin)(nil),
	}
}

func _PElement_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PElement)
	// element
	switch x := m.Element.(type) {
	case *PElement_Fn:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Fn); err != nil {
			return err
		}
	case *PElement_Table:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Table); err != nil {
			return err
		}
	case *PElement_Builtin:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Builtin)
	case nil:
	default:
		return fmt.Errorf("PElement.Element has unexpected type %T", x)
	}
	return nil
}

func _PElement_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PElement)
	switch tag {
	case 1: // element.Fn
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PLFunction)
		err := b.DecodeMessage(msg)
		m.Element = &PElement_Fn{msg}
		return true, err
	case 2: // element.Table
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PLTable)
		err := b.DecodeMessage(msg)
		m.Element = &PElement_Table{msg}
		return true, err
	case 3: // element.Builtin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Element = &PElement_Builtin{x}
		return true, err
	default:
		return false, nil
	}
}

func _PElement_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PElement)
	// element
	switch x := m.Element.(type) {
	case *PElement_Fn:
		s := proto.Size(x.Fn)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PElement_Table:
		s := proto.Size(x.Table)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PElement_Builtin:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Builtin)))
		n += len(x.Builtin)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PUpvalue struct {
	Value *PLValue `protobuf:"bytes,1,opt,name=Value,json=value" json:"Value,omitempty"`
}

func (m *PUpvalue) Reset()                    { *m = PUpvalue{} }
func (m *PUpvalue) String() string            { return proto.CompactTextString(m) }
func (*PUpvalue) ProtoMessage()               {}
func (*PUpvalue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PUpvalue) GetValue() *PLValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type PFnProto struct {
	Idx uint64 `protobuf:"varint,1,opt,name=Idx,json=idx" json:"Idx,omitempty"`
}

func (m *PFnProto) Reset()                    { *m = PFnProto{} }
func (m *PFnProto) String() string            { return proto.CompactTextString(m) }
func (*PFnProto) ProtoMessage()               {}
func (*PFnProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PCheckpoint struct {
	Upvalues map[uint64]*PUpvalue `protobuf:"bytes,1,rep,name=Upvalues,json=upvalues" json:"Upvalues,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Gotten   map[uint64]*PElement `protobuf:"bytes,2,rep,name=Gotten,json=gotten" json:"Gotten,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Protos   map[uint64]*PFnProto `protobuf:"bytes,3,rep,name=Protos,json=protos" json:"Protos,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Targets  []uint64             `protobuf:"varint,4,rep,packed,name=Targets,json=targets" json:"Targets,omitempty"`
}

func (m *PCheckpoint) Reset()                    { *m = PCheckpoint{} }
func (m *PCheckpoint) String() string            { return proto.CompactTextString(m) }
func (*PCheckpoint) ProtoMessage()               {}
func (*PCheckpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PCheckpoint) GetUpvalues() map[uint64]*PUpvalue {
	if m != nil {
		return m.Upvalues
	}
	return nil
}

func (m *PCheckpoint) GetGotten() map[uint64]*PElement {
	if m != nil {
		return m.Gotten
	}
	return nil
}

func (m *PCheckpoint) GetProtos() map[uint64]*PFnProto {
	if m != nil {
		return m.Protos
	}
	return nil
}

type PLValue struct {
	// Types that are valid to be assigned to Value:
	//	*PLValue_Str
	//	*PLValue_Ptr
	//	*PLValue_Number
	//	*PLValue_Nil
	Value isPLValue_Value `protobuf_oneof:"value"`
}

func (m *PLValue) Reset()                    { *m = PLValue{} }
func (m *PLValue) String() string            { return proto.CompactTextString(m) }
func (*PLValue) ProtoMessage()               {}
func (*PLValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isPLValue_Value interface {
	isPLValue_Value()
}

type PLValue_Str struct {
	Str string `protobuf:"bytes,1,opt,name=Str,json=str,oneof"`
}
type PLValue_Ptr struct {
	Ptr uint64 `protobuf:"varint,2,opt,name=Ptr,json=ptr,oneof"`
}
type PLValue_Number struct {
	Number float64 `protobuf:"fixed64,3,opt,name=Number,json=number,oneof"`
}
type PLValue_Nil struct {
	Nil bool `protobuf:"varint,4,opt,name=Nil,json=nil,oneof"`
}

func (*PLValue_Str) isPLValue_Value()    {}
func (*PLValue_Ptr) isPLValue_Value()    {}
func (*PLValue_Number) isPLValue_Value() {}
func (*PLValue_Nil) isPLValue_Value()    {}

func (m *PLValue) GetValue() isPLValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PLValue) GetStr() string {
	if x, ok := m.GetValue().(*PLValue_Str); ok {
		return x.Str
	}
	return ""
}

func (m *PLValue) GetPtr() uint64 {
	if x, ok := m.GetValue().(*PLValue_Ptr); ok {
		return x.Ptr
	}
	return 0
}

func (m *PLValue) GetNumber() float64 {
	if x, ok := m.GetValue().(*PLValue_Number); ok {
		return x.Number
	}
	return 0
}

func (m *PLValue) GetNil() bool {
	if x, ok := m.GetValue().(*PLValue_Nil); ok {
		return x.Nil
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PLValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PLValue_OneofMarshaler, _PLValue_OneofUnmarshaler, _PLValue_OneofSizer, []interface{}{
		(*PLValue_Str)(nil),
		(*PLValue_Ptr)(nil),
		(*PLValue_Number)(nil),
		(*PLValue_Nil)(nil),
	}
}

func _PLValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PLValue)
	// value
	switch x := m.Value.(type) {
	case *PLValue_Str:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Str)
	case *PLValue_Ptr:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Ptr))
	case *PLValue_Number:
		b.EncodeVarint(3<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.Number))
	case *PLValue_Nil:
		t := uint64(0)
		if x.Nil {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("PLValue.Value has unexpected type %T", x)
	}
	return nil
}

func _PLValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PLValue)
	switch tag {
	case 1: // value.Str
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &PLValue_Str{x}
		return true, err
	case 2: // value.Ptr
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &PLValue_Ptr{x}
		return true, err
	case 3: // value.Number
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &PLValue_Number{math.Float64frombits(x)}
		return true, err
	case 4: // value.Nil
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &PLValue_Nil{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _PLValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PLValue)
	// value
	switch x := m.Value.(type) {
	case *PLValue_Str:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Str)))
		n += len(x.Str)
	case *PLValue_Ptr:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Ptr))
	case *PLValue_Number:
		n += proto.SizeVarint(3<<3 | proto.WireFixed64)
		n += 8
	case *PLValue_Nil:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*PLFunction)(nil), "lua.PLFunction")
	proto.RegisterType((*PLTable)(nil), "lua.PLTable")
	proto.RegisterType((*PElement)(nil), "lua.PElement")
	proto.RegisterType((*PUpvalue)(nil), "lua.PUpvalue")
	proto.RegisterType((*PFnProto)(nil), "lua.PFnProto")
	proto.RegisterType((*PCheckpoint)(nil), "lua.PCheckpoint")
	proto.RegisterType((*PLValue)(nil), "lua.PLValue")
}

func init() { proto.RegisterFile("checkpoint.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0xbd, 0xfe, 0xea, 0x84, 0x8a, 0x6a, 0xc5, 0x61, 0x15, 0x55, 0xc8, 0x98, 0x1e, 0x7c,
	0xf2, 0xa1, 0x70, 0x40, 0xbd, 0x11, 0x94, 0x60, 0x20, 0xaa, 0x56, 0xa6, 0xf4, 0xee, 0xa4, 0x4b,
	0x6b, 0xc5, 0x5d, 0x47, 0xeb, 0x75, 0x54, 0xf3, 0xa7, 0xf8, 0x8b, 0x68, 0x3f, 0x4c, 0x42, 0xca,
	0x21, 0xc7, 0x99, 0x7d, 0xf3, 0x66, 0xde, 0x9b, 0x59, 0x38, 0x5b, 0x3d, 0xb0, 0xd5, 0x7a, 0xd3,
	0x54, 0x5c, 0x66, 0x1b, 0xd1, 0xc8, 0x06, 0xa3, 0xba, 0x2b, 0x13, 0x0a, 0x40, 0x17, 0xf3, 0x8e,
	0xaf, 0x64, 0xd5, 0x70, 0x7c, 0x06, 0x68, 0xc6, 0xb7, 0xc4, 0x89, 0x9d, 0xd4, 0x2b, 0x10, 0xe3,
	0x5b, 0xfc, 0x0a, 0x7c, 0xaa, 0xd0, 0xc4, 0xd5, 0x39, 0xdf, 0x94, 0x4e, 0x20, 0xfa, 0xb1, 0xd9,
	0x96, 0x75, 0xc7, 0x5a, 0x82, 0x62, 0x94, 0x7a, 0x45, 0xd4, 0xd9, 0x38, 0xe9, 0x20, 0xa4, 0x8b,
	0x9b, 0x72, 0x59, 0x33, 0x9c, 0x80, 0xff, 0x51, 0x88, 0xb2, 0x27, 0x4e, 0x8c, 0xd2, 0xf1, 0xe5,
	0x8b, 0xac, 0xee, 0xca, 0x8c, 0x2e, 0x6e, 0x15, 0xb0, 0xf0, 0x4b, 0xf5, 0x84, 0x63, 0xf0, 0xbe,
	0xb1, 0xbe, 0x25, 0xee, 0x7f, 0x20, 0xde, 0x9a, 0xf5, 0x2d, 0xbe, 0x80, 0xe0, 0x76, 0xd7, 0xea,
	0x10, 0x13, 0xd8, 0xb6, 0xbf, 0x20, 0xa2, 0xb3, 0x9a, 0x3d, 0x32, 0x2e, 0xf1, 0x1b, 0x70, 0xe7,
	0x5c, 0xab, 0x18, 0x5f, 0xbe, 0xb4, 0xe8, 0x41, 0x63, 0x3e, 0x2a, 0xdc, 0x9f, 0x1c, 0x5f, 0x80,
	0xaf, 0x67, 0xd4, 0xba, 0x76, 0x9c, 0x3a, 0x97, 0x8f, 0x0a, 0x5f, 0x6a, 0x01, 0x13, 0x08, 0xa7,
	0x5d, 0x55, 0xcb, 0x8a, 0x13, 0x14, 0x3b, 0xe9, 0x49, 0x3e, 0x2a, 0xc2, 0xa5, 0x49, 0x4c, 0x4f,
	0x20, 0x64, 0xa6, 0x5f, 0x92, 0x41, 0x44, 0xad, 0x1f, 0x4a, 0xb3, 0x1e, 0xcc, 0xb6, 0x3f, 0xd0,
	0xac, 0x31, 0xc9, 0x39, 0x44, 0x74, 0xce, 0xb5, 0xaf, 0xca, 0xf2, 0x2f, 0x77, 0x4f, 0x83, 0xe5,
	0xd5, 0xdd, 0x53, 0xf2, 0x1b, 0xc1, 0x98, 0x7e, 0xfa, 0xbb, 0x2d, 0x7c, 0xb5, 0x67, 0xb6, 0x31,
	0xf2, 0xb5, 0x21, 0xdd, 0x61, 0xb2, 0x01, 0x30, 0xe3, 0x52, 0xf4, 0xbb, 0x65, 0xe0, 0xf7, 0x10,
	0x7c, 0x6e, 0xa4, 0x64, 0xdc, 0xfa, 0x7b, 0xfe, 0xac, 0xd2, 0x3c, 0x9b, 0xba, 0xe0, 0x5e, 0x07,
	0xaa, 0x4a, 0x0f, 0x37, 0x38, 0xfe, 0xbc, 0xca, 0x3c, 0xdb, 0x2a, 0x7d, 0x13, 0x2d, 0x26, 0x10,
	0xde, 0x94, 0xe2, 0x9e, 0xc9, 0x96, 0x78, 0xfa, 0x26, 0x42, 0x69, 0xc2, 0xc9, 0x57, 0x38, 0xfd,
	0x67, 0x40, 0x25, 0x7a, 0xcd, 0xfa, 0x41, 0xf4, 0x9a, 0xf5, 0xf8, 0x2d, 0x18, 0x6f, 0xec, 0x3e,
	0x4e, 0x4d, 0x47, 0x5b, 0x65, 0x7d, 0xbb, 0x72, 0x3f, 0x38, 0x93, 0x1c, 0xc6, 0x7b, 0x23, 0x1f,
	0xcd, 0x64, 0x4f, 0xe3, 0x80, 0x69, 0x4f, 0xc6, 0xd1, 0x4c, 0x76, 0x71, 0x7b, 0x4c, 0xc9, 0x83,
	0x3a, 0x79, 0xbd, 0x61, 0x8c, 0x01, 0x7d, 0x97, 0x42, 0xb3, 0xa8, 0x6b, 0x41, 0xad, 0x14, 0x2a,
	0x47, 0xa5, 0x30, 0x3f, 0x48, 0xe5, 0x36, 0x52, 0x60, 0x02, 0xc1, 0x75, 0xf7, 0xb8, 0x64, 0x42,
	0x1f, 0x96, 0x93, 0x8f, 0x8a, 0x80, 0xeb, 0x58, 0xa1, 0xaf, 0xab, 0x9a, 0x78, 0xb1, 0x93, 0x46,
	0x0a, 0xcd, 0xab, 0x7a, 0x1a, 0xda, 0x49, 0x96, 0xc6, 0xeb, 0x77, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xfb, 0x8c, 0x70, 0xb3, 0xce, 0x03, 0x00, 0x00,
}
